{"version":3,"sources":["components/Pictures.js","components/pagination.js","serviceWorker.js","index.js","App.js"],"names":["Pictures","pictures","loading","className","length","map","pic","key","id","src","urls","thumb","alt","Pagination","picsPerPage","totalPics","paginate","backPagin","forPagin","pageNumbers","i","Math","ceil","push","aria-label","onClick","href","tabIndex","aria-disabled","number","Boolean","window","location","hostname","match","ReactDOM","render","useState","searchTerm","setSearchTerm","setLoading","setPictures","currentPage","setCurrentPage","prevPage","nextPage","useEffect","a","axios","get","params","query","page","per_page","headers","Authorization","response","data","results","fetchpics","console","log","indexOfLastPic","indexOfFirstPic","currentPics","slice","onSubmit","e","preventDefault","then","catch","error","message","type","onChange","target","value","pageNumber","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RA2BeA,EAzBS,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SACtB,OAD6C,EAAbC,QAErB,0CAIP,yBAAMC,UAAU,wBACfF,EAASG,OACRH,EAASI,KAAI,SAAAC,GAAG,OACd,yBAAKC,IAAKD,EAAIE,GAAIL,UAAU,IACxB,yBAAKA,UAAU,QACX,yBAAKM,IAAKH,EAAII,KAAKC,MAAOR,UAAU,eAAeS,IAAI,QACvD,yBAAKT,UAAU,aACf,wBAAIA,UAAU,cAAcG,EAAIE,IAChC,uBAAGL,UAAU,aAAb,2BAAkDG,EAAIE,GAAtD,KACA,uBAAGL,UAAU,aAAY,2BAAOA,UAAU,cAAjB,kCAKnC,OCeKU,EAnCI,SAAC,GAGhB,IAH6E,IAA5DC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SACxDC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKP,EAAYD,GAAcM,IACrDD,EAAYI,KAAKH,GAErB,OACI,yBAAKI,aAAW,mBACZ,wBAAIrB,UAAU,qCACV,wBAAIA,UAAU,aACV,uBACAsB,QAAS,kBAAKR,KACdd,UAAU,YACVuB,KAAK,KAAKC,SAAS,KAAKC,gBAAc,QAHtC,aAMHT,EAAYd,KAAI,SAAAwB,GAAM,OACpB,wBAAItB,IAAKsB,EAAQ1B,UAAU,aACvB,uBAAGsB,QAAS,kBAAKT,EAASa,IAAS1B,UAAU,YAAYuB,KAAK,MAAMG,OAM3E,wBAAI1B,UAAU,aAEV,uBACIsB,QAAS,kBAAKP,KACdf,UAAU,YAAYuB,KAAK,MAF/B,Y,MChBAI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCGD,WAAgB,IAAD,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,OAEEF,oBAAS,GAFX,mBAErBnC,EAFqB,KAEZsC,EAFY,OAGIH,mBAAS,IAHb,mBAGrBpC,EAHqB,KAGXwC,EAHW,OAIUJ,mBAAS,KAJnB,mBAIrBK,EAJqB,KAIRC,EAJQ,OAKNN,mBAAS,KAAxBvB,EALqB,sBAMTuB,mBAASK,EAAY,GAAjCE,EANqB,sBAOTP,mBAASK,EAAY,GAAjCG,EAPqB,oBAS5BC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBP,GAAW,GADK,SAEOQ,IAAMC,IAAI,yCAA0C,CACzEC,OAAQ,CACNC,MAAO,SACPC,KAAM,EACNC,SAAU,IAEZC,QAAS,CACPC,cACE,gFAVU,OAEVC,EAFU,OAahBf,EAAYe,EAASC,KAAKC,SAC1BlB,GAAW,GAdK,2CAAH,qDAgBfmB,KACC,IAIHC,QAAQC,IAAI,SAAS5D,GAGrB,IA6BM6D,EAAiBpB,EAAc5B,EAC/BiD,EAAkBD,EAAiBhD,EACnCkD,EAAc/D,EAASgE,MAAMF,EAAiBD,GAapD,OAXAF,QAAQC,IAAI,oBAAoBE,GAChCH,QAAQC,IAAI,mBAAmBC,GAC/BF,QAAQC,IAAIG,GAUV,yBAAK7D,UAAU,uEACb,wBAAIA,UAAU,UAAd,iBACA,0BAAO+D,SAzCS,SAAAC,GAClBA,EAAEC,iBACFpB,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CACNC,MAAOb,EACPc,KAAM,EACNC,SAAU,IAEZC,QAAS,CACPC,cACE,gFAGLc,MAAK,SAAAb,GACJf,EAAYe,EAASC,KAAKC,YAE3BY,OAAM,SAAAC,GACLX,QAAQC,IAAIU,EAAMC,aAuBUrE,UAAU,QAClC,uCAAOA,UAAU,OACjBsE,KAAK,OACLC,SAlDY,SAAAP,GACpB5B,EAAc4B,EAAEQ,OAAOC,OACvBhB,QAAQC,IAAIvB,KA8CJ,YAGU,wBAEV,2BACAmC,KAAK,SACLG,MAAM,wBACNzE,UAAU,gCAEd,kBAAC,EAAD,CACEF,SAAU+D,EACV9D,QAASA,IACX,kBAAC,EAAD,CACEY,YAAaA,EACbC,UAAWd,EAASG,OACpBY,SA1BS,SAAC6D,GAAD,OAAgBlC,EAAekC,IA2BxC5D,UA1BU,kBAAM0B,EAAeC,IA2B/B1B,SA1BS,kBAAMyB,EAAeE,SD7ExB,MAASiC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,MAAK,SAAAc,GACjCA,EAAaC,kB","file":"static/js/main.a5a89916.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Pictures = ({pictures, loading}) => {\n    if(loading){\n        return <h2>Loading...</h2>; \n    }\n\n    return (\n        <div  className=\"gallery card-columns\">\n        {pictures.length\n        ? pictures.map(pic => (\n            <div key={pic.id} className=\"\">\n                <div className=\"card\"> \n                    <img src={pic.urls.thumb} className=\"card-img-top\" alt=\"...\" />\n                    <div className=\"card-body\">\n                    <h5 className=\"card-title\">{pic.id}</h5>\n                    <p className=\"card-text\">This is Pic with the id:{pic.id}.</p>\n                    <p className=\"card-text\"><small className=\"text-muted\">Last updated 3 mins ago</small></p>\n                    </div>\n                </div>\n            </div>\n        ))\n        : null}\n        </div>\n    )\n}\n\nexport default Pictures; \n","import React from 'react'; \n\nconst Pagination = ({picsPerPage, totalPics, paginate, backPagin, forPagin}) => {\n    const pageNumbers = []; \n\n    for (let i = 1; i <= Math.ceil(totalPics / picsPerPage); i++){\n        pageNumbers.push(i); \n    }\n    return (\n        <nav aria-label=\"Page navigation\">\n            <ul className=\"pagination justify-content-center\">\n                <li className=\"page-item\">\n                    <a \n                    onClick={() =>backPagin()}\n                    className=\"page-link\" \n                    href=\"!#\" tabIndex=\"-1\" aria-disabled=\"true\"\n                    >Previous</a>\n                </li>\n                {pageNumbers.map(number => (\n                   <li key={number} className=\"page-item\">\n                       <a onClick={() =>paginate(number)} className=\"page-link\" href=\"!#\">{number}</a>\n                   </li> \n                ))}\n                \n                \n                \n                <li className=\"page-item\">\n                    \n                    <a \n                        onClick={() =>forPagin()}\n                        className=\"page-link\" href=\"!#\">Next</a>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Pagination\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; \nimport Pictures from './components/Pictures'; \nimport Pagination from './components/pagination';\n\n//import Gallery from './components/second';\n\nimport './App.css';\n\nexport default function App() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(false); \n  const [pictures, setPictures] = useState([]); \n  const [currentPage, setCurrentPage] = useState(\"1\"); \n  const [picsPerPage] = useState(\"3\"); \n  const [prevPage] = useState(currentPage-1);\n  const [nextPage] = useState(currentPage+1); \n\n  useEffect(() => {\n    const fetchpics = async () => {\n      setLoading(true);\n      const response = await axios.get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: \"coding\",\n          page: 1,\n          per_page: 10\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      });\n      setPictures(response.data.results);\n      setLoading(false); \n    }\n    fetchpics(); \n  }, []); \n\n  \n\n  console.log('picz ='+pictures);\n \n  // Method for the Search-Input\n  const changeHandler = e => {\n    setSearchTerm(e.target.value);\n    console.log(searchTerm);\n  };\n\n  // Search-Request by onclick on SEARCH-Button\n  const sendRequest = e => {\n    e.preventDefault();\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: searchTerm,\n          page: 1,\n          per_page: 10\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      })\n      .then(response => {\n        setPictures(response.data.results);\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  // Get current Pictures\n  const indexOfLastPic = currentPage * picsPerPage; \n  const indexOfFirstPic = indexOfLastPic - picsPerPage; \n  const currentPics = pictures.slice(indexOfFirstPic, indexOfLastPic); \n\n  console.log(\"indexOfFirstPic =\"+indexOfFirstPic); \n  console.log(\"indexOfLastPic =\"+indexOfLastPic); \n  console.log(currentPics); \n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber); \n  const backPagin = () => setCurrentPage(prevPage); \n  const forPagin = () => setCurrentPage(nextPage); \n  \n\n\n  return (\n    <div className=\"main text-white text-primary container mt-2 rounded p-2 text-center\">\n      <h1 className=\"bolded\">My Pic-Search</h1>\n      <form  onSubmit={sendRequest} className=\"pb-3\">\n            <input className=\"pb-3\"\n            type=\"text\"\n            onChange={changeHandler}\n            className=\"form-control col-8 \"\n            />\n            <input \n            type=\"submit\" \n            value=\"Search on Unsplash...\" \n            className=\"btn mt-1 btn-primary col-4\" />\n        </form>\n        <Pictures \n          pictures={currentPics} \n          loading={loading} />\n        <Pagination \n          picsPerPage={picsPerPage}\n          totalPics={pictures.length}\n          paginate={paginate}\n          backPagin={backPagin}\n          forPagin={forPagin} />\n    </div>\n  )\n}\n\n"],"sourceRoot":""}